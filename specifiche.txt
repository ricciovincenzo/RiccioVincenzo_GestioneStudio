SPECIFICA SINTATTICA E SEMANTICA - Attivita.h/.c
Specifica Sintattica

Tipi:
Data:
Una struttura che rappresenta una data, con i campi:

int giorno

int mese

int anno

Attivita:
Un record che rappresenta un’attività, con i campi:

char descrizione[100] -> Descrizione dell’attività.

char corso[50] -> Nome del corso di appartenenza.

Data scadenza -> Data di scadenza dell’attività.

int tempo_stimato -> Tempo stimato in minuti.

int priorita -> Priorità (0 = bassa, 1 = media, 2 = alta).

int stato -> Stato (0 = da fare, 1 = in corso, 2 = completata).

Operatori:
Attivita* creaAttivita(const char* descrizione, const char* corso, Data scadenza, int tempo_stimato, int priorita, int stato)
- Descrizione: Crea e restituisce un puntatore a una nuova Attivita con i campi inizializzati.
- Specifica: Restituisce un puntatore a un’Attivita allocata dinamicamente con i valori passati.

void stampaAttivita(Attivita* att, Data oggi)
- Descrizione: Stampa i dettagli dell’attività e indica se è in ritardo o completata.
- Specifica: Visualizza l’attività senza modificarla.

int dataValida(Data d)
- Descrizione: Verifica la validità della data (giorno, mese, anno).
- Specifica: Restituisce 1 se la data è valida, 0 altrimenti.

void liberaAttivita(Attivita* att)
- Descrizione: Libera la memoria occupata dall’Attivita passata.
- Specifica: Dealloca l’oggetto senza effetti collaterali ulteriori.

========================================================================
SPECIFICA SEMANTICA

creaAttivita(descrizione, corso, scadenza, tempo_stimato, priorita, stato):

Precondizioni:
- descrizione e corso non devono essere NULL.
- scadenza deve essere valida (dataValida(scadenza) == 1).
- priorita deve essere 0, 1 o 2.
- stato deve essere 0, 1 o 2.

Postcondizioni:
- Ritorna un puntatore a un’Attivita con i campi correttamente inizializzati.

Side effects:
- Alloca memoria dinamica per l’Attivita.

stampaAttivita(att, oggi):

Precondizioni:
- att non deve essere NULL.
- oggi deve essere una data valida.

Postcondizioni:
- Stampa a video i dettagli dell’attività.
- Indica se l’attività è in ritardo o completata rispetto alla data oggi.

Side effects:
- Output a schermo.

dataValida(d):

Precondizioni:
- I campi di d devono essere interi.

Postcondizioni:
- Ritorna 1 se la data è valida (giorno coerente con mese e anno, considerando anche anni bisestili), 0 altrimenti.

Side effects:
- Nessuno.

liberaAttivita(att):

Precondizioni:
- att deve essere un puntatore valido a un’Attivita allocata dinamicamente oppure NULL.

Postcondizioni:
- La memoria occupata da att è liberata.

Side effects:
- Deallocazione memoria.


========================================================================
SPECIFICA SINTATTICA E SEMANTICA - ADT Lista.h/.c
Specifica Sintattica

L’ADT Lista rappresenta una lista concatenata di Attivita.

Tipi:
Nodo:
Struttura che rappresenta un nodo della lista, con i campi:

Attivita* dato -> Puntatore all’attività contenuta nel nodo.

Nodo* prossimoNodo -> Puntatore al nodo successivo nella lista.

Lista:
Un puntatore a Nodo che rappresenta la testa della lista.

Operatori:
Lista creaLista(void)
- Descrizione: Crea e restituisce una lista vuota.
- Specifica: Restituisce NULL.

int listaVuota(Lista l)
- Descrizione: Verifica se la lista è vuota.
- Specifica: Restituisce 1 se l == NULL, 0 altrimenti.

Lista inserisciInTesta(Lista l, Attivita* att)
- Descrizione: Inserisce una nuova attività in testa alla lista.
- Specifica: Se la lista iniziale è [a1, a2, ..., an], restituisce [att, a1, a2, ..., an].

Lista rimuoviTesta(Lista l)
- Descrizione: Rimuove il primo nodo della lista e restituisce la lista aggiornata.
- Precondizione: La lista non deve essere vuota.
- Specifica: Se l = [a1, a2, ..., an], restituisce [a2, ..., an].

void liberaLista(Lista l)
- Descrizione: Libera tutta la memoria occupata dalla lista, inclusi i nodi e le attività associate.
- Specifica: Dopo l’esecuzione la lista non è più utilizzabile.

int contaElementi(Lista l)
- Descrizione: Conta e restituisce il numero di elementi nella lista.
- Specifica: Restituisce un intero n pari al numero di nodi nella lista.

Lista caricaAttivitaDaFile(const char* nomeFile)
- Descrizione: Legge da file e crea una lista di attività.
- Specifica: Restituisce la lista con le attività lette dal file, o NULL se il file è vuoto o non esiste.

========================================================================
SPECIFICA SEMANTICA

creaLista():

Postcondizione:
- Restituisce NULL, che rappresenta una lista vuota.

Side effects:
- Nessuno.

listaVuota(l):

Postcondizione:
- Restituisce 1 se l == NULL, 0 altrimenti.

Side effects:
- Nessuno.

inserisciInTesta(l, att):

Precondizione:
- att deve essere un puntatore valido a un’Attivita.

Postcondizione:
- Restituisce una nuova lista con att in testa, seguita dagli elementi di l.

Side effects:
- Alloca memoria per un nuovo nodo.

rimuoviTesta(l):

Precondizione:
- l non deve essere NULL.

Postcondizione:
- Restituisce la lista senza il primo nodo.
- Il nodo rimosso e l’attività associata vengono liberati.

Side effects:
- Dealloca memoria del primo nodo e dell’attività associata.

liberaLista(l):

Postcondizione:
- Tutta la memoria occupata dalla lista e dalle attività è liberata.

Side effects:
- Dealloca memoria.

contaElementi(l):

Postcondizione:
- Restituisce un intero n pari al numero di nodi di l.

Side effects:
- Nessuno.

caricaAttivitaDaFile(nomeFile):

Postcondizione:
- Restituisce una lista contenente le attività lette dal file nomeFile.
- Se il file non esiste o è vuoto, restituisce NULL.

Side effects:
- Legge da file e alloca memoria per ogni attività e nodo creato.


========================================================================
SPECIFICA SINTATTICA E SEMANTICA - Gestione.h/.c
Specifica Sintattica

Gestione contiene funzioni per manipolare e aggiornare le attività di studio.

Operatori:
Lista aggiungiAttivita(Lista l, Attivita* att)
- Descrizione: Inserisce una nuova attività nella lista, mantenendo un ordinamento (es. per priorità o data).
- Specifica: Restituisce una lista l' che contiene tutte le attività di l più att inserita nel posto corretto.

int eliminaAttivita(Lista* l, const char* descrizione)
- Descrizione: Rimuove dalla lista l’attività che ha la descrizione specificata, se presente.
- Specifica: Restituisce 1 se l’attività è stata trovata e rimossa, 0 altrimenti.

void aggiornaProgresso(Attivita* att, int progresso)
- Descrizione: Aggiorna il campo progresso di un’attività con il valore dato (percentuale da 0 a 100).
- Specifica: L’attività att ha il suo campo progresso aggiornato a progresso.

Attivita* cercaAttivita(Lista l, const char* descrizione)
- Descrizione: Cerca un’attività nella lista tramite la sua descrizione.
- Specifica: Restituisce un puntatore all’attività se trovata, NULL altrimenti.

void stampaAttivita(Attivita* att)
- Descrizione: Stampa i dettagli di una singola attività.
- Specifica: Visualizza a video i dati dell’attività senza modificarli.

========================================================================
SPECIFICA SEMANTICA

aggiungiAttivita(l, att):

Precondizione:
- att deve essere un puntatore valido a un’Attivita con dati coerenti.

Postcondizione:
- La lista risultante contiene tutte le attività di l più att inserita in posizione ordinata.

Side effects:
- Potenziale allocazione di memoria per un nuovo nodo.

eliminaAttivita(&l, descrizione):

Postcondizione:
- Se esiste un’attività con descrizione uguale a descrizione, la lista risultante non la contiene più.
- Restituisce 1 se rimosso, 0 se non trovato.

Side effects:
- Dealloca memoria del nodo e attività rimossi.

aggiornaProgresso(att, progresso):

Precondizione:
- att non deve essere NULL.
- progresso ∈ [0, 100].

Postcondizione:
- Il campo progresso di att è aggiornato a progresso.

Side effects:
- Modifica lo stato interno dell’attività puntata da att.

cercaAttivita(l, descrizione):

Postcondizione:
- Restituisce un puntatore all’attività con la descrizione cercata, o NULL se non trovata.

Side effects:
- Nessuno.

stampaAttivita(att):

Precondizione:
- att non deve essere NULL.

Effetto:
- Stampa i dati di att su output standard.

Side effects:
- Nessuno.


========================================================================
SPECIFICA SINTATTICA E SEMANTICA - Report.h/.c

Il modulo Report gestisce la generazione e la stampa dei report settimanali delle attività di studio.

Operatori:
void generaReportSettimanale(Lista l, Data oggi)
- Descrizione: Genera e stampa un report delle attività pianificate o in scadenza entro la settimana successiva alla data odierna.
- Specifica: Stampa a video un riepilogo delle attività con relative descrizioni, corsi, date di scadenza e stato di completamento.

int contaAttivitaSettimanali(Lista l, Data oggi)
- Descrizione: Conta il numero di attività che hanno scadenza entro 7 giorni dalla data oggi.
- Specifica: Restituisce un intero pari al numero di attività con scadenza entro la settimana.

void stampaRiepilogoAttivita(Attivita* att)
- Descrizione: Stampa i dettagli sintetici di una singola attività, formattati per il report.
- Specifica: Visualizza a video i dati principali di att senza modificarli.

========================================================================
SPECIFICA SEMANTICA

generaReportSettimanale(l, oggi):

Precondizione:
- oggi deve essere una data valida.

Effetto:
- Stampa tutte le attività la cui data di scadenza è compresa tra oggi e oggi + 7 giorni.

Side effects:
- Nessuno diverso dalla stampa su output standard.

contaAttivitaSettimanali(l, oggi):

Precondizione:
- oggi deve essere una data valida.

Postcondizione:
- Restituisce il numero n di attività con data di scadenza compresa nell’intervallo [oggi, oggi + 7 giorni].

Side effects:
- Nessuno.

stampaRiepilogoAttivita(att):

Precondizione:
- att non deve essere NULL.

Effetto:
- Stampa a video i dati principali di att in formato report.

Side effects:
- Nessuno.


========================================================================
SPECIFICA SINTATTICA E SEMANTICA - Menu.h/.c

Il modulo Menu gestisce l’interazione con l’utente attraverso un menu testuale per la gestione delle attività di studio.

Operatori:
void mostraMenu(Lista *lista, Data oggi)
- Descrizione: Visualizza un menu interattivo che permette all’utente di eseguire operazioni sulle attività di studio, aggiornando la lista passata per riferimento.
- Specifica: Avvia un ciclo che riceve input da tastiera e chiama le funzioni appropriate di gestione in base alla scelta dell’utente.

void gestisciScelta(int scelta, Lista *lista, Data oggi)
- Descrizione: Gestisce l’azione corrispondente alla scelta numerica inserita dall’utente nel menu.
- Specifica: Esegue le operazioni di aggiunta, rimozione, modifica, visualizzazione o uscita.

void stampaOpzioniMenu(void)
- Descrizione: Stampa a video le opzioni disponibili nel menu.
- Specifica: Visualizza l’elenco delle scelte possibili senza modificare lo stato del programma.

========================================================================
SPECIFICA SEMANTICA

mostraMenu(lista, oggi):

Precondizione:
- lista deve essere un puntatore valido a una lista di attività.
- oggi deve essere una data valida.

Effetto:
- Entra in un ciclo che stampa il menu, legge la scelta, la gestisce e continua finché non viene scelta l’uscita.

Side effects:
- Modifica lo stato della lista in base alle operazioni eseguite.
- Stampa a video.

gestisciScelta(scelta, lista, oggi):

Precondizione:
- scelta deve essere un intero corrispondente a una voce del menu valida.
- lista deve essere un puntatore valido.
- oggi deve essere una data valida.

Effetto:
- Esegue l’azione associata alla scelta, modificando la lista o visualizzando informazioni.

Side effects:
- Modifica la lista in caso di operazioni di inserimento o cancellazione.
- Stampa a video o legge input da tastiera.

stampaOpzioniMenu():

Effetto:
- Visualizza a video tutte le opzioni del menu.

Side effects:
- Nessuno, oltre alla stampa su output standard.